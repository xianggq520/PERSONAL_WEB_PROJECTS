1.什么是闭包?

闭包是依据词法作用域产生的必然结果。通过变相引用函数的活动对象导致其不能被回收，然而形成了依然可以用引用访问其作用域链的结果。

    
```

        (function(w,d){

                var s = "javascript";

        }(window,document))

    ```

有些说法把这种方式称之为闭包，并说闭包可以避免全局污染，首先大家在这里应该有一个自己的答案，以上这个例子是一个闭包吗？

避免全局污染不假，但闭包谈不上，它最多算是在全局执行环境之上新建了一个二级作用域，从而避免了在全局上定义其他变量。切记它不是真正意义的闭包。

2.闭包的原理可不可以说一下？

结合我们上面讲过的，它的根源起始于词法阶段，在这个阶段中形成了词法作用域。最终根据调用环境产生的环境栈来形成了一个由变量对象组成的作用域链，当一个环境没有被js正常垃圾回收时，我们依然可以通过引用来访问它原始的作用域链。

3.你是怎样使用闭包的？
使用闭包的场景有很多，笔者最近在看函数式编程,可以说在js中 闭包其实就是函数式的一个重要基础,举个不完全函数的栗子.

```````````````````````````							  
function calculate (a,b){
	return a + b;
}
 
function fun(){
		    
	var ars  = Array.from(arguments);
 	return function(){
	 	var arguNum = ars.concat(Array.from(arguments));
		return arguNum.reduce(calculate);
	}
}

var n = fun (1,2,3,4,5,6,7);

var k = n(8,9,10);

delete n;

``````````````````````````````

上面这个栗子，就是保留对 fun函数的 活动对象(arguments[])，当然在我们日常开发中还有更复杂的情况，这需要很多 函数块，到那个时候，才能显出我们闭包的真正威力.

文章到这里大概讲完了，都是我自己的薄见和书上的一些内容，希望能对大家有点影响吧，当然这是正面的...如果哪里文中有描述不恰当或大家有更好的见解还望指出，谢谢。


